buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java-library'
    id 'application'
    id 'io.qameta.allure' version '2.8.1'
}

group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    allureVersion = "2.13.8"
    selenideVersion = "5.19.0"
    junitVersion = "5.7.0"
}

repositories {
    maven {url = "https://dl.bintray.com/qameta/maven-unstable/"}
    mavenCentral()
}

allure {
    version = "${allureVersion}"
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = "${allureVersion}"
    }
}

dependencies {
    compile ("com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",

            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "io.rest-assured:rest-assured:4.3.3",
            "com.fasterxml.jackson.core:jackson-databind:2.12.1",

            "org.aspectj:aspectjweaver:1.9.5",
            "com.github.javafaker:javafaker:1.0.2",
            "org.aeonbits.owner:owner:1.0.12",
            "io.qameta.allure:allure-ee-junit-platform:3.28.2",

            "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties += System.properties
    systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"

    if (System.getProperty("threads")) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
}
